@use './constants' as *;

// MEDIA QUERIES
@mixin mq($from: null, $until: null, $only: null) {
	// A mixin for applying responsive properties, takes in device names (tablet, desktop, wide)
	// then uses corresponsing values from $breakpoints map in ./_variables.scss, or pixel values.
	//
	// Examples:
	// for $breakpoints: (tablet: 600px, desktop: 1024px, wide: 1440px)
	// @include mq($from: tablet) or @include mq(tablet): 600px and up
	// @include mq($from: 430px) or @include mq(430px): 430px and up
	// @include mq($until: wide): less than 1440px (up to 1439px)
	// @include mq($from: 200px,$until: tablet) or @include mq(200px,tablet): 200px until 599px (200px <= x < 600px)
	// @include mq($only: desktop): 1024px until 1440px (1024px <= x < 1439px)
	// sass-lint:disable-block brace-style
	// ONLY
	@if $only { // if $only given, ignore user $from and $until values and set these
		// Map device names to breakpoint values in ./_variables.scss for $from and $until
		@if $only == 'tablet' {
			$from: map-get($breakpoints, tablet);
			$until: map-get($breakpoints, desktop);
		}
		@else if $only == 'desktop' {
			$from: map-get($breakpoints, desktop);
			$until: map-get($breakpoints, wide);
		}
	}
	@else {
		// FROM
		// Map device names to breakpoint values in ./_variables.scss for $from
		@if $from == 'tablet' {
			$from: map-get($breakpoints, tablet);
		}
		@else if $from == 'desktop' {
			$from: map-get($breakpoints, desktop);
		}
		@else if $from == 'wide' {
			$from: map-get($breakpoints, wide);
		}
		// Map device names to breakpoint values in ./_variables.scss for $until
		@if $until == 'tablet' {
			$until: map-get($breakpoints, tablet);
		}
		@else if $until == 'desktop' {
			$until: map-get($breakpoints, desktop);
		}
		@else if $until == 'wide' {
			$until: map-get($breakpoints, wide);
		}
	}
	@if $from {
		@if $until { // if both $from and $until given (by user or due to $only being given)
			@media (min-width: $from) and (max-width: #{$until - 1px}) { @content; }
		}
		@else { // if only $from given
			@media (min-width: $from) { @content; }
		}
	}
	@else if $until { // if only $until given
		@media (max-width: #{$until - 1px}) { @content; }
	}
}

// RESPONSIVE PROPERTIES
@mixin resp-prop($property, $mob: null, $tab: null, $desk: null, $wide: null) {
	// Create responsive property values by specifying the property name, the mobile, tablet, desktop and wide values.
	//
	// Example:
	// @include resp-prop(margin, '20px 0', 40px, '60px 20PX', 80px)
	#{$property}: #{$mob};
	@if $tab {
		@include mq($from: tablet) {
			#{$property}: #{$tab};
		}
	}
	@if $desk {
		@include mq($from: desktop) {
			#{$property}: #{$desk};
		}
	}
	@if $wide {
		@include mq($from: wide) {
			#{$property}: #{$wide};
		}
	}
}


// VERTICAL SPACING
@mixin v-spacing($prop, $position, $size) {
	$spacings: map-get($vertical-spacings, #{$size});
	#{$prop}-#{$position}: map-get($spacings, 'mobile') !important;
	// Add tablet spacings if different from mobile
	@if map-get($spacings, 'mobile') != map-get($spacings, 'tablet') {
		@include mq(tablet) {
			#{$prop}-#{$position}: map-get($spacings, 'tablet') !important;
		}
	}
	// Add desktop spacings if different from tablet
	@if map-get($spacings, 'tablet') != map-get($spacings, 'desktop') {
		@include mq(desktop) {
			#{$prop}-#{$position}: map-get($spacings, 'desktop') !important;
		}
	}
}


// ADD BORDER TO ELEMENT
@mixin bordered($padding: $buffer-s, $color: map-get($pot-mauve, 7)) {
	border: $border-width solid $color;
	border-radius: $border-radius;
	padding: $padding;
}


// ADD AN OVERLAYED ::AFTER PSEUDO-ELEMENT TO ELEMENT
@mixin overlayed-pseudo($content: '', $type: 'after') {
	position: relative;

	&::#{$type} {
		bottom: 0;
		content: $content;
		left: 0;
		position: absolute;
		right: 0;
		top: 0;
	}
}


// MAKE ELEMENT AN ICON BUTTON
@mixin icon-btn($size: $icon-btn-size, $icon-url: '', $bg-color: false) {
	@include overlayed-pseudo();

	@if $bg-color {
		background-color: $bg-color;
	}
	@else {
		background-color: transparent;
	}

	border: none;
	border-radius: 50%;
	cursor: pointer;
	font-size: 0;
	height: $size;
	transition: background-color $transition;
	width: $size;

	&:focus,
	&:hover {
		background-color: map-get($pot-blue, 4);

		&::after {
			background-color: #fff;
		}
	}

	&:focus {
		outline: none;
	}

	&::after {
		background-color: map-get($pot-blue, 5);
		mask-image: url($icon-url);
		mask-position: center center;
		mask-repeat: no-repeat;
		mask-size: 60%;
		transition: mask-image $transition;
	}
}
